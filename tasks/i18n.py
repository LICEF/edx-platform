"""
Internationalization tasks

NOTE: if a function has **kwargs, it means it is a pretask
for a task taking certain args/options (i.e. **kwargs are ignored)
"""
from __future__ import print_function

import argparse
import os
import subprocess
import sys
from distutils.spawn import find_executable

from path import path
from invoke import task
from invoke import run as sh
from .utils.cmd import cmd
from .utils.envs import Env

I18N_REPORT_DIR = Env.REPO_ROOT.joinpath('i18n')
I18N_XUNIT_REPORT = I18N_REPORT_DIR.joinpath('nosetests.xml')

@task
def mk_i18n_report_dir():
    I18N_REPORT_DIR.makedirs_p()

@task('i18n.mk_i18n_report_dir')
def clean_report_dir():
    """Clean coverage files, to ensure that we don't use stale data to generate reports."""
    sh("find {!s} -type f -delete".format(I18N_REPORT_DIR))

@task('i18n.validate_gettext')
def extract(verbose=False, **kwargs):
    """
    Extract localizable strings from sources
    Params:
        verbose=False Display verbose output
    """
    sh(cmd('invoke', 'update_assets', '--skip-collect'))
    executable = str(Env.REPO_ROOT.joinpath('i18n/extract.py'))
    if verbose:
        sh(cmd(executable, '-vv'))
    else:
        sh(cmd(executable))


@task('i18n.extract')
def generate(strict=False):
    """
    Compile localizable strings from sources, extracting strings first.
    Params:
        strict=False Complain if files are missing
    """
    executable = str(Env.REPO_ROOT.joinpath('i18n/generate.py'))
    if strict:
        sh(cmd(executable, '--strict'))
    else:
        sh(cmd(executable))


@task('i18n.extract')
def dummy():
    """
    Simulate international translation by generating dummy strings
    corresponding to source strings.
    """
    sh(cmd(Env.REPO_ROOT.joinpath('i18n/dummy.py')))


@task
def validate_gettext(**kwargs):
    """Make sure GNU gettext utilities are available"""
    if find_executable('xgettext') is None:
        print(
            "Cannot locate GNU gettext utilities, which are required by "
            "django for internationalization.\n See https://docs.djangoproject"
            ".com/en/dev/topics/i18n/translation/#message-files)\n"
            "Try downloading them from http://www.gnu.org/software/gettext/"
        )
        sys.exit(1)


@task
def validate_transifex_config():
    """Make sure config file with username/password exists"""
    pathstr = os.environ['HOME'] + '/.transifexrc'
    config_file = path(pathstr)
    if not (config_file.exists() and config_file.size > 0):
        print(
            "Cannot connect to Transifex, config file is missing or empty: "
            "{}\n See http://help.transifex.com/features/client/#transifexrc"
            .format(pathstr)
        )
        sys.exit(1)


@task('i18n.validate_transifex_config')
def transifex_push():
    """Push source strings to Transifex for translation"""
    sh(cmd(Env.REPO_ROOT.joinpath('i18n/transifex.py'), 'push'))


@task('i18n.validate_transifex_config')
def transifex_pull():
    """Pull translated strings from Transifex"""
    sh(cmd(Env.REPO_ROOT.joinpath('i18n/transifex.py'), 'pull'))


@task(pre=[
    "i18n.transifex_pull",
    "i18n.extract",
    "i18n.dummy",
])
def robot_pull():
    #XXX: ugh shouldn't have to do it this way!!!!
    sh(cmd("inv", "i18n.generate", "--strict"))
    sh(cmd("git", "clean", "-fdX", "conf/locale"))
    call_task('test')
    commands = (
        ["git", "add", "conf/locale"],
        [
            "git", "commit",
            '--message="Update translations (autogenerated message)"',
            '--edit'
        ],
    )
    for command in commands:
        sh(cmd(*command))


@task(pre=[
    "i18n.extract",
    "i18n.transifex_push"
])
def robot_push():
    pass


@task(pre=[
    'i18n.extract'
])
def test():
    #NOTE: these should become pretask one assets.py is migrated to invoke
    sh(cmd('invoke', 'prereqs.install'))
    sh(cmd('invoke', 'i18n.mk_i18n_report_dir'))
    sh(cmd('invoke', 'i18n.clean_reports_dir'))
    pythonpath_prefix = "PYTHONPATH={}/i18n:$PYTHONPATH".format(Env.REPO_ROOT)
    return
    test_run(
        "i18n",
        cmd(
            pythonpath_prefix,
            "nosetests",
            Env.REPO_ROOT + "/i18n/tests", "--with-xunit",
            "--xunit-file=" + I18N_XUNIT_REPORT
        )
    )
